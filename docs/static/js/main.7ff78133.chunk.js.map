{"version":3,"sources":["components/CategoryAdd.js","helpers/GetGifs.js","components/GifGridItem.js","components/GiftCollection.js","hooks/useFetchGifs.js","components/GifExpertApp.js","App.js","reportWebVitals.js","index.js"],"names":["CategoryAdd","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","category","console","log","type","value","onChange","target","getGifElement","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GiftCollection","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","image","key","GifExpertApp","categories","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"kOA0CeA,EArCK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAEnB,EAAqCC,mBAAS,IAA9C,mBAAOC,EAAP,KAAoBC,EAApB,KAuBA,OACI,sBAAMC,SAfW,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAe,SAAAS,GAAQ,OAAKP,GAAL,mBAAoBO,OAC3CN,EAAc,KAGC,cAAfD,GACAQ,QAAQC,IAAI,cAOhB,SACI,uBACCC,KAAK,OACLC,MAASX,EACTY,SA1BiB,SAACT,GACvBK,QAAQC,IAAIN,EAAEU,OAAOF,OACrBV,EAAeE,EAAEU,OAAOF,a,+BCVnBG,EAAa,uCAAG,WAAOP,GAAP,uBAAAQ,EAAA,6DACnBC,EADmB,iDAC8BC,UAAUV,GADxC,+DAINW,MAAOF,GAJD,cAInBG,EAJmB,gBAKFA,EAAKC,OALH,uBAKjBC,EALiB,EAKjBA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAClB,IAAD,EACI,MAAO,CACPC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAK1CR,QAAQC,IAAIa,GAjBa,kBAmBlBA,GAnBkB,4CAAH,sDCaXO,EAXK,SAAC,GAAmB,IAAlBH,EAAiB,EAAjBA,MAAQV,EAAS,EAATA,IAG1B,OADAR,QAAQC,IAAIiB,GAER,sBAAKI,UAAU,OAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QC0BDO,EA7BQ,SAAC,GAAkB,IAAhB1B,EAAe,EAAfA,SAEtB,ECDwB,SAAEA,GAE1B,MAA0BR,mBAAS,CAC/BsB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAiBA,OAZAC,qBAAW,WACPvB,EAAcP,GACT+B,MAAK,SAAAC,GACFC,YAAY,WACRJ,EAAS,CACLf,KAAKkB,EACLL,SAAS,MAEd,UAEZ,CAAC3B,IAEG4B,EDlB2BM,CAAclC,GAAnCoB,EAAb,EAAQN,KAAca,EAAtB,EAAsBA,QAItB,OAFA1B,QAAQC,IAAIyB,GAIR,gCACI,mCAAM3B,EAAN,OAEE2B,GAAW,6CAGb,8BAGYP,EAAOJ,KAAK,SAAAmB,GAAK,OACZ,wBAAC,EAAD,2BACQA,GADR,IAEGC,IAAKD,EAAMjB,eEtB9BmB,EAAe,WAIxB,MAAoC7C,mBAAS,CAAC,eAA9C,mBAAO8C,EAAP,KAAmB/C,EAAnB,KAOA,OACI,kDAEI,uBACA,cAAC,EAAD,CAAaA,cAAgBA,IAC9B,6BAEI+C,EAAWtB,KAAK,SAAAhB,GACZ,OAAO,cAAC,EAAD,CAEEA,SAAWA,GADLA,YCdnBuC,EANH,WACV,OACE,cAAC,EAAD,KCMWC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBX,MAAK,YAAkD,IAA/CY,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.7ff78133.chunk.js","sourcesContent":["import React from 'react';\r\nimport { useState } from 'react/cjs/react.development';\r\n\r\n\r\n\r\nconst CategoryAdd = ({ setCategories }) => {\r\n\r\n    const [inputValue,  setInputValue] = useState(''); //Si quieres que tu state sea un string vacio dejalo como String vacio\r\n\r\n    const handleInputChange = (e) => {\r\n        console.log(e.target.value);\r\n        setInputValue( e.target.value ) \r\n        //No utilizamos los tres puntos aqui debido a que no estamos cambiando el objeto input\r\n        //Sino que estamos usando el mismo!!!\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if( inputValue.trim().length > 2){\r\n            setCategories( category => [inputValue, ...category ]);\r\n            setInputValue('');\r\n        }\r\n\r\n        if( inputValue === 'Alejandro'){\r\n            console.log('The beast');\r\n        }\r\n        \r\n        \r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input \r\n             type=\"text\"\r\n             value = {inputValue}\r\n             onChange = { handleInputChange }\r\n            />\r\n        </form>\r\n      \r\n    )\r\n}\r\n\r\nexport default CategoryAdd\r\n","\r\nexport const getGifElement = async( category ) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=jFWjSq9pKaY36jqrlcpPldDJiGQbnc6J`;\r\n    //encodeURI() let me to fill the empty spaces with % or anything that i need to use to fill it\r\n    //le ponemos un \"+\" a los espacios vacios\r\n    const resp = await fetch( url )\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map( img => \r\n        { \r\n            return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url,\r\n        }\r\n    }\r\n    );\r\n\r\n    console.log(gifs);//esto se imprime dos veces por el modo estricto\r\n\r\n    return gifs;\r\n}","import React from 'react';\r\n\r\n\r\nconst GifGridItem = ({title , url}) => {\r\n\r\n    console.log(title);\r\n    return (\r\n        <div className=\"card\">\r\n            <img src={url} alt={title}/>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GifGridItem;","import React from 'react'\r\n//import { useState, useEffect } from 'react';\r\n//import { getGifElement } from '../helpers/GetGifs';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport GifGridItem from './GifGridItem';\r\n\r\nconst GiftCollection = ({ category }) => {\r\n    \r\n    const { data:images , loading } = useFetchGifs( category );\r\n\r\n    console.log(loading);\r\n    \r\n    return (\r\n\r\n        <div>\r\n            <h3> {category} </h3>\r\n            \r\n            { loading && <h1>Cargando...</h1>}\r\n            {/* loading ? 'cargando...' : 'Fin de carga' */}\r\n\r\n            <div>\r\n                \r\n                    {\r\n                        images.map( image => (\r\n                             <GifGridItem \r\n                                { ...image } \r\n                                key={image.id}></GifGridItem>\r\n                        ))\r\n                    }\r\n            \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GiftCollection\r\n","import { getGifElement } from \"../helpers/GetGifs\";\r\n//import React from 'react'\r\n//Solo debemos importar react si vamos a retornar JSX\r\n\r\nimport { useState, useEffect } from \"react\"\r\n\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true,\r\n    })\r\n\r\n    useEffect( () => {\r\n        getGifElement(category)\r\n            .then(imgs => {\r\n                setTimeout( () => {\r\n                    setState({\r\n                        data:imgs,\r\n                        loading: false,\r\n                    })\r\n                }, 3000);\r\n            })\r\n    }, [category])\r\n\r\n    return state;\r\n\r\n}\r\n","import React, { useState } from 'react'\r\nimport CategoryAdd from './CategoryAdd';\r\nimport GiftCollection from './GiftCollection';\r\n\r\nexport const GifExpertApp = () => {\r\n    \r\n    //const categories = ['One punch ', 'Samurai x ', 'Attack on titan '];\r\n    \r\n    const [categories, setCategories] = useState(['One punch ']);\r\n\r\n    //const handleAddGif = () => {\r\n        //categories.push(\"new\"); ASI NO SE MODIFICA UN COMPONENTE\r\n        //setCategories([...categories, 'Mega man'] );\r\n    //}\r\n\r\n    return (\r\n        <div>\r\n            gif app example\r\n            <hr />\r\n            <CategoryAdd setCategories={ setCategories } />\r\n           <ol>\r\n           {\r\n               categories.map( category => { \r\n                   return <GiftCollection\r\n                             key={category}\r\n                            category={ category }>\r\n                        </GiftCollection>\r\n                })\r\n           }\r\n           </ol>\r\n           \r\n        </div>\r\n    )\r\n}\r\n","\nimport './App.css';\nimport { GifExpertApp } from './components/GifExpertApp';\n\nconst App = () => {\n  return (\n    <GifExpertApp />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}